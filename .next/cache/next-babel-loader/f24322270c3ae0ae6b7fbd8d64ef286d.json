{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/tianhangliu/education/csci578/cluster-visualization/components/ClusterGraph.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from 'react';\nimport G6 from '@antv/g6';\nimport insertCss from 'insert-css';\nimport { defaultContainerWidth, defaultContainerHeight } from '../constants'; // Following code is based on examples from https://g6.antv.vision/en/examples/\n\ninsertCss(`\n  .g6-tooltip {\n    border: 1px solid #e2e2e2;\n    border-radius: 4px;\n    font-size: 12px;\n    color: #000;\n    background-color: rgba(255, 255, 255, 0.9);\n    padding: 10px 8px; \n    box-shadow: rgb(174, 174, 174) 0px 0px 10px;\n    white-space:pre-wrap;\n  }\n`);\nG6.registerEdge('line-arrow', {\n  getShapeStyle(cfg) {\n    const startPoint = cfg.startPoint;\n    const endPoint = cfg.endPoint;\n    let points = [startPoint]; // 添加起始点\n    // 添加结束点\n\n    points.push(endPoint);\n    const path = this.getPath(points);\n    const style = G6.Util.mix({}, G6.Global.defaultEdge.style, {\n      stroke: '#BBB',\n      lineWidth: 1,\n      path,\n      endArrow: {\n        path: 'M 6,0 L -6,-6 L -3,0 L -6,6 Z',\n        d: 6\n      }\n    }, cfg.style);\n    return style;\n  }\n\n}, 'line');\nexport default function Graph(props) {\n  const ref = useRef();\n  const graphRef = useRef();\n\n  const {\n    style,\n    data,\n    handleNodeClick\n  } = props,\n        rest = _objectWithoutProperties(props, [\"style\", \"data\", \"handleNodeClick\"]);\n\n  const bindEvents = () => {\n    if (graphRef.current) {\n      graphRef.current.on('node:click', e => {\n        const {\n          item\n        } = e;\n        handleNodeClick && handleNodeClick(item);\n      });\n    }\n  };\n\n  useEffect(() => {\n    const calculatedWidth = ref.current.clientWidth || defaultContainerWidth;\n    const calculatedHeight = ref.current.clientHeight || defaultContainerHeight;\n\n    if (!graphRef.current) {\n      graphRef.current = new G6.Graph({\n        container: ref.current,\n        width: calculatedWidth,\n        height: calculatedHeight,\n        layout: {\n          type: 'circular'\n        },\n        modes: {\n          default: ['drag-canvas', 'zoom-canvas', 'activate-relations', {\n            type: 'tooltip',\n            formatText: model => {\n              return `Full Name: ${model.name}\\nACDC Cluster: ${model.acdcCluster || ''}`;\n            }\n          }, {\n            type: 'collapse-expand-group',\n            trigger: 'click'\n          }]\n        },\n        defaultNode: {\n          size: 20\n        },\n        defaultEdge: {\n          shape: 'line-arrow',\n          size: 2,\n          style: {\n            stroke: '#e2e2e2'\n          }\n        },\n        nodeStateStyles: {\n          active: {\n            opacity: 1\n          },\n          inactive: {\n            opacity: 0.2\n          }\n        },\n        edgeStateStyles: {\n          active: {\n            stroke: '#000'\n          }\n        }\n      });\n      bindEvents();\n    }\n\n    data.nodes.sort((lhs, rhs) => {\n      if (lhs.groupId === rhs.groupId) {\n        return 0;\n      } else if (lhs.groupId < rhs.groupId) {\n        return 1;\n      } else {\n        return -1;\n      }\n    });\n    graphRef.current.data(data);\n    graphRef.current.render();\n    const edges = graphRef.current.getEdges();\n    graphRef.current.paint();\n  }, [data]);\n  return __jsx(\"div\", _extends({\n    ref: ref,\n    style: style\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/tianhangliu/education/csci578/cluster-visualization/components/ClusterGraph.js"],"names":["React","useEffect","useState","useRef","G6","insertCss","defaultContainerWidth","defaultContainerHeight","registerEdge","getShapeStyle","cfg","startPoint","endPoint","points","push","path","getPath","style","Util","mix","Global","defaultEdge","stroke","lineWidth","endArrow","d","Graph","props","ref","graphRef","data","handleNodeClick","rest","bindEvents","current","on","e","item","calculatedWidth","clientWidth","calculatedHeight","clientHeight","container","width","height","layout","type","modes","default","formatText","model","name","acdcCluster","trigger","defaultNode","size","shape","nodeStateStyles","active","opacity","inactive","edgeStateStyles","nodes","sort","lhs","rhs","groupId","render","edges","getEdges","paint"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport G6 from '@antv/g6';\nimport insertCss from 'insert-css';\n\nimport { defaultContainerWidth, defaultContainerHeight } from '../constants';\n\n// Following code is based on examples from https://g6.antv.vision/en/examples/\ninsertCss(`\n  .g6-tooltip {\n    border: 1px solid #e2e2e2;\n    border-radius: 4px;\n    font-size: 12px;\n    color: #000;\n    background-color: rgba(255, 255, 255, 0.9);\n    padding: 10px 8px; \n    box-shadow: rgb(174, 174, 174) 0px 0px 10px;\n    white-space:pre-wrap;\n  }\n`);\n\nG6.registerEdge(\n  'line-arrow',\n  {\n    getShapeStyle(cfg) {\n      const startPoint = cfg.startPoint;\n      const endPoint = cfg.endPoint;\n      let points = [startPoint]; // 添加起始点\n      // 添加结束点\n      points.push(endPoint);\n      const path = this.getPath(points);\n      const style = G6.Util.mix(\n        {},\n        G6.Global.defaultEdge.style,\n        {\n          stroke: '#BBB',\n          lineWidth: 1,\n          path,\n          endArrow: {\n            path: 'M 6,0 L -6,-6 L -3,0 L -6,6 Z',\n            d: 6\n          }\n        },\n        cfg.style\n      );\n      return style;\n    }\n  },\n  'line'\n);\n\nexport default function Graph(props) {\n  const ref = useRef();\n  const graphRef = useRef();\n\n  const { style, data, handleNodeClick, ...rest } = props;\n\n  const bindEvents = () => {\n    if (graphRef.current) {\n      graphRef.current.on('node:click', e => {\n        const { item } = e;\n        handleNodeClick && handleNodeClick(item);\n      });\n    }\n  };\n\n  useEffect(() => {\n    const calculatedWidth = ref.current.clientWidth || defaultContainerWidth;\n    const calculatedHeight = ref.current.clientHeight || defaultContainerHeight;\n\n    if (!graphRef.current) {\n      graphRef.current = new G6.Graph({\n        container: ref.current,\n        width: calculatedWidth,\n        height: calculatedHeight,\n        layout: {\n          type: 'circular'\n        },\n        modes: {\n          default: [\n            'drag-canvas',\n            'zoom-canvas',\n            'activate-relations',\n            {\n              type: 'tooltip',\n              formatText: model => {\n                return `Full Name: ${\n                  model.name\n                }\\nACDC Cluster: ${model.acdcCluster || ''}`;\n              }\n            },\n            {\n              type: 'collapse-expand-group',\n              trigger: 'click'\n            }\n          ]\n        },\n        defaultNode: {\n          size: 20\n        },\n        defaultEdge: {\n          shape: 'line-arrow',\n          size: 2,\n          style: {\n            stroke: '#e2e2e2'\n          }\n        },\n        nodeStateStyles: {\n          active: {\n            opacity: 1\n          },\n          inactive: {\n            opacity: 0.2\n          }\n        },\n        edgeStateStyles: {\n          active: {\n            stroke: '#000'\n          }\n        }\n      });\n      bindEvents();\n    }\n    data.nodes.sort((lhs, rhs) => {\n      if (lhs.groupId === rhs.groupId) {\n        return 0;\n      } else if (lhs.groupId < rhs.groupId) {\n        return 1;\n      } else {\n        return -1;\n      }\n    });\n    graphRef.current.data(data);\n\n    graphRef.current.render();\n\n    const edges = graphRef.current.getEdges();\n    graphRef.current.paint();\n  }, [data]);\n\n  return <div ref={ref} style={style} {...rest}></div>;\n}\n"]},"metadata":{},"sourceType":"module"}