{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/tianhangliu/education/csci578/cluster-visualization/components/ClusterGraph.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from 'react';\nimport G6 from '@antv/g6';\nimport insertCss from 'insert-css';\nimport { defaultContainerWidth, defaultContainerHeight } from '../constants'; // Following code is based on examples from https://g6.antv.vision/en/examples/\n\ninsertCss(\"\\n  .g6-tooltip {\\n    border: 1px solid #e2e2e2;\\n    border-radius: 4px;\\n    font-size: 12px;\\n    color: #000;\\n    background-color: rgba(255, 255, 255, 0.9);\\n    padding: 10px 8px; \\n    box-shadow: rgb(174, 174, 174) 0px 0px 10px;\\n    white-space:pre-wrap;\\n  }\\n\");\nG6.registerEdge('line-arrow', {\n  getPath: function getPath(points) {\n    var startPoint = points[0];\n    var endPoint = points[1];\n    return [['M', startPoint.x, startPoint.y], ['L', endPoint.x / 3 + 2 / 3 * startPoint.x, startPoint.y], ['L', endPoint.x / 3 + 2 / 3 * startPoint.x, endPoint.y], ['L', endPoint.x, endPoint.y]];\n  },\n  getShapeStyle: function getShapeStyle(cfg) {\n    var startPoint = cfg.startPoint;\n    var endPoint = cfg.endPoint;\n    var controlPoints = this.getControlPoints(cfg);\n    var points = [startPoint]; // 添加起始点\n    // Add control points\n\n    if (controlPoints) {\n      points = points.concat(controlPoints);\n    } // 添加结束点\n\n\n    points.push(endPoint);\n    var path = this.getPath(points);\n    var style = G6.Util.mix({}, G6.Global.defaultEdge.style, {\n      stroke: '#BBB',\n      lineWidth: 1,\n      path: path,\n      endArrow: {\n        path: 'M 6,0 L -6,-6 L -3,0 L -6,6 Z',\n        d: 6\n      }\n    }, cfg.style);\n    return style;\n  }\n}, 'line');\nexport default function Graph(props) {\n  var ref = useRef();\n  var graphRef = useRef();\n\n  var style = props.style,\n      data = props.data,\n      handleNodeClick = props.handleNodeClick,\n      rest = _objectWithoutProperties(props, [\"style\", \"data\", \"handleNodeClick\"]);\n\n  var bindEvents = function bindEvents() {\n    if (graphRef.current) {\n      graphRef.current.on('node:click', function (e) {\n        var item = e.item;\n        handleNodeClick && handleNodeClick(item);\n      });\n    }\n  };\n\n  useEffect(function () {\n    var calculatedWidth = ref.current.clientWidth || defaultContainerWidth;\n    var calculatedHeight = ref.current.clientHeight || defaultContainerHeight;\n\n    if (!graphRef.current) {\n      graphRef.current = new G6.Graph({\n        container: ref.current,\n        width: calculatedWidth,\n        height: calculatedHeight,\n        layout: {\n          type: 'circular'\n        },\n        modes: {\n          \"default\": ['drag-canvas', 'zoom-canvas', 'activate-relations', {\n            type: 'tooltip',\n            formatText: function formatText(model) {\n              return \"Full Name: \".concat(model.name, \"\\nACDC Cluster: \").concat(model.acdcCluster || '');\n            }\n          }, {\n            type: 'collapse-expand-group',\n            trigger: 'click'\n          }]\n        },\n        defaultNode: {\n          size: 20\n        },\n        defaultEdge: {\n          shape: 'line-arrow',\n          size: 2,\n          style: {\n            stroke: '#e2e2e2'\n          }\n        },\n        nodeStateStyles: {\n          active: {\n            opacity: 1\n          },\n          inactive: {\n            opacity: 0.2\n          }\n        },\n        edgeStateStyles: {\n          active: {\n            stroke: '#000'\n          }\n        }\n      });\n      bindEvents();\n    }\n\n    data.nodes.sort(function (lhs, rhs) {\n      if (lhs.groupId === rhs.groupId) {\n        return 0;\n      } else if (lhs.groupId < rhs.groupId) {\n        return 1;\n      } else {\n        return -1;\n      }\n    });\n    graphRef.current.data(data);\n    graphRef.current.render();\n    var edges = graphRef.current.getEdges();\n    graphRef.current.paint();\n  }, [data]);\n  return __jsx(\"div\", _extends({\n    ref: ref,\n    style: style\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/tianhangliu/education/csci578/cluster-visualization/components/ClusterGraph.js"],"names":["React","useEffect","useState","useRef","G6","insertCss","defaultContainerWidth","defaultContainerHeight","registerEdge","getPath","points","startPoint","endPoint","x","y","getShapeStyle","cfg","controlPoints","getControlPoints","concat","push","path","style","Util","mix","Global","defaultEdge","stroke","lineWidth","endArrow","d","Graph","props","ref","graphRef","data","handleNodeClick","rest","bindEvents","current","on","e","item","calculatedWidth","clientWidth","calculatedHeight","clientHeight","container","width","height","layout","type","modes","formatText","model","name","acdcCluster","trigger","defaultNode","size","shape","nodeStateStyles","active","opacity","inactive","edgeStateStyles","nodes","sort","lhs","rhs","groupId","render","edges","getEdges","paint"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,EAAP,MAAe,UAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,qBAAT,EAAgCC,sBAAhC,QAA8D,cAA9D,C,CAEA;;AACAF,SAAS,oRAAT;AAaAD,EAAE,CAACI,YAAH,CACE,YADF,EAEE;AACEC,EAAAA,OADF,mBACUC,MADV,EACkB;AACd,QAAMC,UAAU,GAAGD,MAAM,CAAC,CAAD,CAAzB;AACA,QAAME,QAAQ,GAAGF,MAAM,CAAC,CAAD,CAAvB;AACA,WAAO,CACL,CAAC,GAAD,EAAMC,UAAU,CAACE,CAAjB,EAAoBF,UAAU,CAACG,CAA/B,CADK,EAEL,CAAC,GAAD,EAAMF,QAAQ,CAACC,CAAT,GAAa,CAAb,GAAkB,IAAI,CAAL,GAAUF,UAAU,CAACE,CAA5C,EAA+CF,UAAU,CAACG,CAA1D,CAFK,EAGL,CAAC,GAAD,EAAMF,QAAQ,CAACC,CAAT,GAAa,CAAb,GAAkB,IAAI,CAAL,GAAUF,UAAU,CAACE,CAA5C,EAA+CD,QAAQ,CAACE,CAAxD,CAHK,EAIL,CAAC,GAAD,EAAMF,QAAQ,CAACC,CAAf,EAAkBD,QAAQ,CAACE,CAA3B,CAJK,CAAP;AAMD,GAVH;AAWEC,EAAAA,aAXF,yBAWgBC,GAXhB,EAWqB;AACjB,QAAML,UAAU,GAAGK,GAAG,CAACL,UAAvB;AACA,QAAMC,QAAQ,GAAGI,GAAG,CAACJ,QAArB;AACA,QAAMK,aAAa,GAAG,KAAKC,gBAAL,CAAsBF,GAAtB,CAAtB;AACA,QAAIN,MAAM,GAAG,CAACC,UAAD,CAAb,CAJiB,CAIU;AAC3B;;AACA,QAAIM,aAAJ,EAAmB;AACjBP,MAAAA,MAAM,GAAGA,MAAM,CAACS,MAAP,CAAcF,aAAd,CAAT;AACD,KARgB,CASjB;;;AACAP,IAAAA,MAAM,CAACU,IAAP,CAAYR,QAAZ;AACA,QAAMS,IAAI,GAAG,KAAKZ,OAAL,CAAaC,MAAb,CAAb;AACA,QAAMY,KAAK,GAAGlB,EAAE,CAACmB,IAAH,CAAQC,GAAR,CACZ,EADY,EAEZpB,EAAE,CAACqB,MAAH,CAAUC,WAAV,CAAsBJ,KAFV,EAGZ;AACEK,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,SAAS,EAAE,CAFb;AAGEP,MAAAA,IAAI,EAAJA,IAHF;AAIEQ,MAAAA,QAAQ,EAAE;AACRR,QAAAA,IAAI,EAAE,+BADE;AAERS,QAAAA,CAAC,EAAE;AAFK;AAJZ,KAHY,EAYZd,GAAG,CAACM,KAZQ,CAAd;AAcA,WAAOA,KAAP;AACD;AAtCH,CAFF,EA0CE,MA1CF;AA6CA,eAAe,SAASS,KAAT,CAAeC,KAAf,EAAsB;AACnC,MAAMC,GAAG,GAAG9B,MAAM,EAAlB;AACA,MAAM+B,QAAQ,GAAG/B,MAAM,EAAvB;;AAFmC,MAI3BmB,KAJ2B,GAIeU,KAJf,CAI3BV,KAJ2B;AAAA,MAIpBa,IAJoB,GAIeH,KAJf,CAIpBG,IAJoB;AAAA,MAIdC,eAJc,GAIeJ,KAJf,CAIdI,eAJc;AAAA,MAIMC,IAJN,4BAIeL,KAJf;;AAMnC,MAAMM,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,QAAIJ,QAAQ,CAACK,OAAb,EAAsB;AACpBL,MAAAA,QAAQ,CAACK,OAAT,CAAiBC,EAAjB,CAAoB,YAApB,EAAkC,UAAAC,CAAC,EAAI;AAAA,YAC7BC,IAD6B,GACpBD,CADoB,CAC7BC,IAD6B;AAErCN,QAAAA,eAAe,IAAIA,eAAe,CAACM,IAAD,CAAlC;AACD,OAHD;AAID;AACF,GAPD;;AASAzC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAM0C,eAAe,GAAGV,GAAG,CAACM,OAAJ,CAAYK,WAAZ,IAA2BtC,qBAAnD;AACA,QAAMuC,gBAAgB,GAAGZ,GAAG,CAACM,OAAJ,CAAYO,YAAZ,IAA4BvC,sBAArD;;AAEA,QAAI,CAAC2B,QAAQ,CAACK,OAAd,EAAuB;AACrBL,MAAAA,QAAQ,CAACK,OAAT,GAAmB,IAAInC,EAAE,CAAC2B,KAAP,CAAa;AAC9BgB,QAAAA,SAAS,EAAEd,GAAG,CAACM,OADe;AAE9BS,QAAAA,KAAK,EAAEL,eAFuB;AAG9BM,QAAAA,MAAM,EAAEJ,gBAHsB;AAI9BK,QAAAA,MAAM,EAAE;AACNC,UAAAA,IAAI,EAAE;AADA,SAJsB;AAO9BC,QAAAA,KAAK,EAAE;AACL,qBAAS,CACP,aADO,EAEP,aAFO,EAGP,oBAHO,EAIP;AACED,YAAAA,IAAI,EAAE,SADR;AAEEE,YAAAA,UAAU,EAAE,oBAAAC,KAAK,EAAI;AACnB,0CACEA,KAAK,CAACC,IADR,6BAEmBD,KAAK,CAACE,WAAN,IAAqB,EAFxC;AAGD;AANH,WAJO,EAYP;AACEL,YAAAA,IAAI,EAAE,uBADR;AAEEM,YAAAA,OAAO,EAAE;AAFX,WAZO;AADJ,SAPuB;AA0B9BC,QAAAA,WAAW,EAAE;AACXC,UAAAA,IAAI,EAAE;AADK,SA1BiB;AA6B9BjC,QAAAA,WAAW,EAAE;AACXkC,UAAAA,KAAK,EAAE,YADI;AAEXD,UAAAA,IAAI,EAAE,CAFK;AAGXrC,UAAAA,KAAK,EAAE;AACLK,YAAAA,MAAM,EAAE;AADH;AAHI,SA7BiB;AAoC9BkC,QAAAA,eAAe,EAAE;AACfC,UAAAA,MAAM,EAAE;AACNC,YAAAA,OAAO,EAAE;AADH,WADO;AAIfC,UAAAA,QAAQ,EAAE;AACRD,YAAAA,OAAO,EAAE;AADD;AAJK,SApCa;AA4C9BE,QAAAA,eAAe,EAAE;AACfH,UAAAA,MAAM,EAAE;AACNnC,YAAAA,MAAM,EAAE;AADF;AADO;AA5Ca,OAAb,CAAnB;AAkDAW,MAAAA,UAAU;AACX;;AACDH,IAAAA,IAAI,CAAC+B,KAAL,CAAWC,IAAX,CAAgB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC5B,UAAID,GAAG,CAACE,OAAJ,KAAgBD,GAAG,CAACC,OAAxB,EAAiC;AAC/B,eAAO,CAAP;AACD,OAFD,MAEO,IAAIF,GAAG,CAACE,OAAJ,GAAcD,GAAG,CAACC,OAAtB,EAA+B;AACpC,eAAO,CAAP;AACD,OAFM,MAEA;AACL,eAAO,CAAC,CAAR;AACD;AACF,KARD;AASApC,IAAAA,QAAQ,CAACK,OAAT,CAAiBJ,IAAjB,CAAsBA,IAAtB;AAEAD,IAAAA,QAAQ,CAACK,OAAT,CAAiBgC,MAAjB;AAEA,QAAMC,KAAK,GAAGtC,QAAQ,CAACK,OAAT,CAAiBkC,QAAjB,EAAd;AACAvC,IAAAA,QAAQ,CAACK,OAAT,CAAiBmC,KAAjB;AACD,GAxEQ,EAwEN,CAACvC,IAAD,CAxEM,CAAT;AA0EA,SAAO;AAAK,IAAA,GAAG,EAAEF,GAAV;AAAe,IAAA,KAAK,EAAEX;AAAtB,KAAiCe,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport G6 from '@antv/g6';\nimport insertCss from 'insert-css';\n\nimport { defaultContainerWidth, defaultContainerHeight } from '../constants';\n\n// Following code is based on examples from https://g6.antv.vision/en/examples/\ninsertCss(`\n  .g6-tooltip {\n    border: 1px solid #e2e2e2;\n    border-radius: 4px;\n    font-size: 12px;\n    color: #000;\n    background-color: rgba(255, 255, 255, 0.9);\n    padding: 10px 8px; \n    box-shadow: rgb(174, 174, 174) 0px 0px 10px;\n    white-space:pre-wrap;\n  }\n`);\n\nG6.registerEdge(\n  'line-arrow',\n  {\n    getPath(points) {\n      const startPoint = points[0];\n      const endPoint = points[1];\n      return [\n        ['M', startPoint.x, startPoint.y],\n        ['L', endPoint.x / 3 + (2 / 3) * startPoint.x, startPoint.y],\n        ['L', endPoint.x / 3 + (2 / 3) * startPoint.x, endPoint.y],\n        ['L', endPoint.x, endPoint.y]\n      ];\n    },\n    getShapeStyle(cfg) {\n      const startPoint = cfg.startPoint;\n      const endPoint = cfg.endPoint;\n      const controlPoints = this.getControlPoints(cfg);\n      let points = [startPoint]; // 添加起始点\n      // Add control points\n      if (controlPoints) {\n        points = points.concat(controlPoints);\n      }\n      // 添加结束点\n      points.push(endPoint);\n      const path = this.getPath(points);\n      const style = G6.Util.mix(\n        {},\n        G6.Global.defaultEdge.style,\n        {\n          stroke: '#BBB',\n          lineWidth: 1,\n          path,\n          endArrow: {\n            path: 'M 6,0 L -6,-6 L -3,0 L -6,6 Z',\n            d: 6\n          }\n        },\n        cfg.style\n      );\n      return style;\n    }\n  },\n  'line'\n);\n\nexport default function Graph(props) {\n  const ref = useRef();\n  const graphRef = useRef();\n\n  const { style, data, handleNodeClick, ...rest } = props;\n\n  const bindEvents = () => {\n    if (graphRef.current) {\n      graphRef.current.on('node:click', e => {\n        const { item } = e;\n        handleNodeClick && handleNodeClick(item);\n      });\n    }\n  };\n\n  useEffect(() => {\n    const calculatedWidth = ref.current.clientWidth || defaultContainerWidth;\n    const calculatedHeight = ref.current.clientHeight || defaultContainerHeight;\n\n    if (!graphRef.current) {\n      graphRef.current = new G6.Graph({\n        container: ref.current,\n        width: calculatedWidth,\n        height: calculatedHeight,\n        layout: {\n          type: 'circular'\n        },\n        modes: {\n          default: [\n            'drag-canvas',\n            'zoom-canvas',\n            'activate-relations',\n            {\n              type: 'tooltip',\n              formatText: model => {\n                return `Full Name: ${\n                  model.name\n                }\\nACDC Cluster: ${model.acdcCluster || ''}`;\n              }\n            },\n            {\n              type: 'collapse-expand-group',\n              trigger: 'click'\n            }\n          ]\n        },\n        defaultNode: {\n          size: 20\n        },\n        defaultEdge: {\n          shape: 'line-arrow',\n          size: 2,\n          style: {\n            stroke: '#e2e2e2'\n          }\n        },\n        nodeStateStyles: {\n          active: {\n            opacity: 1\n          },\n          inactive: {\n            opacity: 0.2\n          }\n        },\n        edgeStateStyles: {\n          active: {\n            stroke: '#000'\n          }\n        }\n      });\n      bindEvents();\n    }\n    data.nodes.sort((lhs, rhs) => {\n      if (lhs.groupId === rhs.groupId) {\n        return 0;\n      } else if (lhs.groupId < rhs.groupId) {\n        return 1;\n      } else {\n        return -1;\n      }\n    });\n    graphRef.current.data(data);\n\n    graphRef.current.render();\n\n    const edges = graphRef.current.getEdges();\n    graphRef.current.paint();\n  }, [data]);\n\n  return <div ref={ref} style={style} {...rest}></div>;\n}\n"]},"metadata":{},"sourceType":"module"}