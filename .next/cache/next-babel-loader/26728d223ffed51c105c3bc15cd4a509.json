{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport \"antd/lib/table/style/css\";\nimport _Table from \"antd/lib/table\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport \"antd/lib/icon/style/css\";\nimport _Icon from \"antd/lib/icon\";\nimport \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/input/style/css\";\nimport _Input from \"antd/lib/input\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"antd/lib/typography/style/css\";\nimport _Typography from \"antd/lib/typography\";\nimport \"antd/lib/layout/style/css\";\nimport _Layout from \"antd/lib/layout\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Highlighter from 'react-highlight-words';\nimport Link from 'next/link'; // Modified from sample code at https://ant.design/components/table/\n\nconst {\n  Header,\n  Content\n} = _Layout;\nconst {\n  Title\n} = _Typography;\n\nclass Index extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      searchText: '',\n      searchedColumn: ''\n    });\n\n    _defineProperty(this, \"getColumnSearchProps\", dataIndex => ({\n      filterDropdown: ({\n        setSelectedKeys,\n        selectedKeys,\n        confirm,\n        clearFilters\n      }) => __jsx(\"div\", {\n        style: {\n          padding: 8\n        }\n      }, __jsx(_Input, {\n        ref: node => {\n          this.searchInput = node;\n        },\n        placeholder: `Search ${dataIndex}`,\n        value: selectedKeys[0],\n        onChange: e => setSelectedKeys(e.target.value ? [e.target.value] : []),\n        onPressEnter: () => this.handleSearch(selectedKeys, confirm, dataIndex),\n        style: {\n          width: 188,\n          marginBottom: 8,\n          display: 'block'\n        }\n      }), __jsx(_Button, {\n        type: \"primary\",\n        onClick: () => this.handleSearch(selectedKeys, confirm, dataIndex),\n        icon: \"search\",\n        size: \"small\",\n        style: {\n          width: 90,\n          marginRight: 8\n        }\n      }, \"Search\"), __jsx(_Button, {\n        onClick: () => this.handleReset(clearFilters),\n        size: \"small\",\n        style: {\n          width: 90\n        }\n      }, \"Reset\")),\n      filterIcon: filtered => __jsx(_Icon, {\n        type: \"search\",\n        style: {\n          color: filtered ? '#1890ff' : undefined\n        }\n      }),\n      onFilter: (value, record) => record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\n      onFilterDropdownVisibleChange: visible => {\n        if (visible) {\n          setTimeout(() => this.searchInput.select());\n        }\n      },\n      render: text => this.state.searchedColumn === dataIndex ? __jsx(Highlighter, {\n        highlightStyle: {\n          backgroundColor: '#ffc069',\n          padding: 0\n        },\n        searchWords: [this.state.searchText],\n        autoEscape: true,\n        textToHighlight: text.toString()\n      }) : text\n    }));\n\n    _defineProperty(this, \"handleSearch\", (selectedKeys, confirm, dataIndex) => {\n      confirm();\n      this.setState({\n        searchText: selectedKeys[0],\n        searchedColumn: dataIndex\n      });\n    });\n\n    _defineProperty(this, \"handleReset\", clearFilters => {\n      clearFilters();\n      this.setState({\n        searchText: ''\n      });\n    });\n  }\n\n  render() {\n    const {\n      data\n    } = this.props;\n    const dataSource = [];\n\n    for (let key of _Object$keys(data)) {\n      dataSource.push({\n        key: data[key].id,\n        id: data[key].id,\n        cluster: data[key].cluster,\n        elements: data[key].elements.join('\\n')\n      });\n    }\n\n    const columns = [_objectSpread({\n      title: 'Cluster',\n      dataIndex: 'cluster',\n      key: 'cluster'\n    }, this.getColumnSearchProps('cluster')), _objectSpread({\n      title: 'Elements',\n      dataIndex: 'elements',\n      key: 'elements'\n    }, this.getColumnSearchProps('elements')), {\n      title: 'Action',\n      key: 'action',\n      fixed: 'right',\n      width: 150,\n      render: (text, record) => __jsx(\"span\", null, __jsx(Link, {\n        href: `/visualization?id=${record.id}`\n      }, __jsx(\"a\", {\n        target: \"_blank\"\n      }, \"Visualize\")))\n    }];\n    return __jsx(_Layout, null, __jsx(Header, {\n      style: {\n        padding: '0.5rem'\n      }\n    }, __jsx(Title, {\n      style: {\n        textAlign: 'center',\n        color: '#fff'\n      }\n    }, \"Cluster Visualization\")), __jsx(Content, {\n      style: {\n        margin: '2rem',\n        background: '#fff',\n        padding: '1rem'\n      }\n    }, __jsx(_Table, {\n      style: {\n        maxHeight: '80vh'\n      },\n      columns: columns,\n      dataSource: dataSource,\n      scroll: {\n        x: 1200\n      }\n    })));\n  }\n\n}\n\nIndex.getInitialProps = async function () {\n  const data = await import('../parser/cluster.json');\n  return {\n    data: data['default']\n  };\n};\n\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}