{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys2 from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport \"antd/lib/table/style/css\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/icon/style/css\";\nimport _Icon from \"antd/lib/icon\";\nimport \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/input/style/css\";\nimport _Input from \"antd/lib/input\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"antd/lib/typography/style/css\";\nimport _Typography from \"antd/lib/typography\";\nimport \"antd/lib/layout/style/css\";\nimport _Layout from \"antd/lib/layout\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys2(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Highlighter from 'react-highlight-words';\nimport Link from 'next/link'; // Modified from sample code at https://ant.design/components/table/\n\nvar Header = _Layout.Header,\n    Content = _Layout.Content;\nvar Title = _Typography.Title;\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Index)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      searchText: '',\n      searchedColumn: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getColumnSearchProps\", function (dataIndex) {\n      return {\n        filterDropdown: function filterDropdown(_ref) {\n          var setSelectedKeys = _ref.setSelectedKeys,\n              selectedKeys = _ref.selectedKeys,\n              confirm = _ref.confirm,\n              clearFilters = _ref.clearFilters;\n          return __jsx(\"div\", {\n            style: {\n              padding: 8\n            }\n          }, __jsx(_Input, {\n            ref: function ref(node) {\n              _this.searchInput = node;\n            },\n            placeholder: \"Search \".concat(dataIndex),\n            value: selectedKeys[0],\n            onChange: function onChange(e) {\n              return setSelectedKeys(e.target.value ? [e.target.value] : []);\n            },\n            onPressEnter: function onPressEnter() {\n              return _this.handleSearch(selectedKeys, confirm, dataIndex);\n            },\n            style: {\n              width: 188,\n              marginBottom: 8,\n              display: 'block'\n            }\n          }), __jsx(_Button, {\n            type: \"primary\",\n            onClick: function onClick() {\n              return _this.handleSearch(selectedKeys, confirm, dataIndex);\n            },\n            icon: \"search\",\n            size: \"small\",\n            style: {\n              width: 90,\n              marginRight: 8\n            }\n          }, \"Search\"), __jsx(_Button, {\n            onClick: function onClick() {\n              return _this.handleReset(clearFilters);\n            },\n            size: \"small\",\n            style: {\n              width: 90\n            }\n          }, \"Reset\"));\n        },\n        filterIcon: function filterIcon(filtered) {\n          return __jsx(_Icon, {\n            type: \"search\",\n            style: {\n              color: filtered ? '#1890ff' : undefined\n            }\n          });\n        },\n        onFilter: function onFilter(value, record) {\n          return record[dataIndex].toString().toLowerCase().includes(value.toLowerCase());\n        },\n        onFilterDropdownVisibleChange: function onFilterDropdownVisibleChange(visible) {\n          if (visible) {\n            setTimeout(function () {\n              return _this.searchInput.select();\n            });\n          }\n        },\n        render: function render(text) {\n          return _this.state.searchedColumn === dataIndex ? __jsx(Highlighter, {\n            highlightStyle: {\n              backgroundColor: '#ffc069',\n              padding: 0\n            },\n            searchWords: [_this.state.searchText],\n            autoEscape: true,\n            textToHighlight: text.toString()\n          }) : text;\n        }\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSearch\", function (selectedKeys, confirm, dataIndex) {\n      confirm();\n\n      _this.setState({\n        searchText: selectedKeys[0],\n        searchedColumn: dataIndex\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleReset\", function (clearFilters) {\n      clearFilters();\n\n      _this.setState({\n        searchText: ''\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"render\",\n    value: function render() {\n      var data = this.props.data;\n      var dataSource = [];\n\n      for (var _i = 0, _Object$keys = _Object$keys2(data); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        dataSource.push({\n          key: data[key].id,\n          id: data[key].id,\n          cluster: data[key].cluster,\n          elements: data[key].elements.join('\\n')\n        });\n      }\n\n      var columns = [_objectSpread({\n        title: 'Cluster',\n        dataIndex: 'cluster',\n        key: 'cluster'\n      }, this.getColumnSearchProps('cluster')), _objectSpread({\n        title: 'Elements',\n        dataIndex: 'elements',\n        key: 'elements'\n      }, this.getColumnSearchProps('elements')), {\n        title: 'Action',\n        key: 'action',\n        fixed: 'right',\n        width: 150,\n        render: function render(text, record) {\n          return __jsx(\"span\", null, __jsx(Link, {\n            href: \"/visualization?id=\".concat(record.id)\n          }, __jsx(\"a\", {\n            target: \"_blank\"\n          }, \"Visualize\")));\n        }\n      }];\n      return __jsx(_Layout, null, __jsx(Header, {\n        style: {\n          padding: '0.5rem'\n        }\n      }, __jsx(Title, {\n        style: {\n          textAlign: 'center',\n          color: '#fff'\n        }\n      }, \"Cluster Visualization\")), __jsx(Content, {\n        style: {\n          margin: '2rem',\n          background: '#fff',\n          padding: '1rem'\n        }\n      }, __jsx(_Table, {\n        style: {\n          maxHeight: '80vh'\n        },\n        columns: columns,\n        dataSource: dataSource,\n        scroll: {\n          x: 1200\n        }\n      })));\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nIndex.getInitialProps =\n/*#__PURE__*/\n_asyncToGenerator(\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee() {\n  var data;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return import('../parser/cluster.json');\n\n        case 2:\n          data = _context.sent;\n          return _context.abrupt(\"return\", {\n            data: data['default']\n          });\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}