{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from 'react';\nimport G6 from '@antv/g6';\nimport insertCss from 'insert-css';\nimport { defaultContainerWidth, defaultContainerHeight } from '../constants'; // Following code is based on examples from https://g6.antv.vision/en/examples/\n\ninsertCss(`\n  .g6-tooltip {\n    border: 1px solid #e2e2e2;\n    border-radius: 4px;\n    font-size: 12px;\n    color: #000;\n    background-color: rgba(255, 255, 255, 0.9);\n    padding: 10px 8px; \n    box-shadow: rgb(174, 174, 174) 0px 0px 10px;\n    white-space:pre-wrap;\n  }\n`);\nG6.registerEdge('line-arrow', {\n  getShapeStyle(cfg) {\n    const startPoint = cfg.startPoint;\n    const endPoint = cfg.endPoint;\n    let points = [startPoint]; // 添加起始点\n    // 添加结束点\n\n    points.push(endPoint);\n    const path = this.getPath(points);\n    const style = G6.Util.mix({}, G6.Global.defaultEdge.style, {\n      stroke: '#BBB',\n      lineWidth: 1,\n      path,\n      endArrow: {\n        path: 'M 6,0 L -6,-6 L -3,0 L -6,6 Z',\n        d: 6\n      }\n    }, cfg.style);\n    return style;\n  }\n\n}, 'line');\nexport default function Graph(props) {\n  const ref = useRef();\n  const graphRef = useRef();\n\n  const {\n    style,\n    data,\n    handleNodeClick\n  } = props,\n        rest = _objectWithoutProperties(props, [\"style\", \"data\", \"handleNodeClick\"]);\n\n  const bindEvents = () => {\n    if (graphRef.current) {\n      graphRef.current.on('node:click', e => {\n        const {\n          item\n        } = e;\n        handleNodeClick && handleNodeClick(item);\n      });\n    }\n  };\n\n  useEffect(() => {\n    const calculatedWidth = ref.current.clientWidth || defaultContainerWidth;\n    const calculatedHeight = ref.current.clientHeight || defaultContainerHeight;\n\n    if (!graphRef.current) {\n      graphRef.current = new G6.Graph({\n        container: ref.current,\n        width: calculatedWidth,\n        height: calculatedHeight,\n        layout: {\n          type: 'circular'\n        },\n        modes: {\n          default: ['drag-canvas', 'zoom-canvas', 'activate-relations', {\n            type: 'tooltip',\n            formatText: model => {\n              return `Full Name: ${model.name}\\nACDC Cluster: ${model.acdcCluster || ''}`;\n            }\n          }, {\n            type: 'collapse-expand-group',\n            trigger: 'click'\n          }]\n        },\n        defaultNode: {\n          size: 20\n        },\n        defaultEdge: {\n          shape: 'line-arrow',\n          size: 2,\n          style: {\n            stroke: '#e2e2e2'\n          }\n        },\n        nodeStateStyles: {\n          active: {\n            opacity: 1\n          },\n          inactive: {\n            opacity: 0.2\n          }\n        },\n        edgeStateStyles: {\n          active: {\n            stroke: '#000'\n          }\n        }\n      });\n      bindEvents();\n    }\n\n    data.nodes.sort((lhs, rhs) => {\n      if (lhs.groupId === rhs.groupId) {\n        return 0;\n      } else if (lhs.groupId < rhs.groupId) {\n        return 1;\n      } else {\n        return -1;\n      }\n    });\n    graphRef.current.data(data);\n    graphRef.current.render();\n    const edges = graphRef.current.getEdges();\n    graphRef.current.paint();\n  }, [data]);\n  return __jsx(\"div\", _extends({\n    ref: ref,\n    style: style\n  }, rest));\n}","map":null,"metadata":{},"sourceType":"module"}