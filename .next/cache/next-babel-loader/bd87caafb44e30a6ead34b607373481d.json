{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from 'react';\nimport G6 from '@antv/g6';\nimport insertCss from 'insert-css';\nimport { defaultContainerWidth, defaultContainerHeight } from '../constants'; // Following code is based on examples from https://g6.antv.vision/en/examples/\n\ninsertCss(\"\\n  .g6-tooltip {\\n    border: 1px solid #e2e2e2;\\n    border-radius: 4px;\\n    font-size: 12px;\\n    color: #000;\\n    background-color: rgba(255, 255, 255, 0.9);\\n    padding: 10px 8px; \\n    box-shadow: rgb(174, 174, 174) 0px 0px 10px;\\n    white-space:pre-wrap;\\n  }\\n\"); // Registers custom edge\n\nG6.registerEdge('line-arrow', {\n  getShapeStyle: function getShapeStyle(cfg) {\n    // Generates line path\n    var startPoint = cfg.startPoint;\n    var endPoint = cfg.endPoint;\n    var points = [startPoint, endPoint];\n    var path = this.getPath(points);\n    var style = G6.Util.mix({}, G6.Global.defaultEdge.style, {\n      stroke: '#BBB',\n      lineWidth: 1,\n      path: path,\n      endArrow: {\n        path: 'M 6,0 L -6,-6 L -3,0 L -6,6 Z',\n        d: 6\n      }\n    }, cfg.style);\n    return style;\n  }\n}, 'line');\nexport default function Graph(props) {\n  var ref = useRef();\n  var graphRef = useRef();\n\n  var style = props.style,\n      data = props.data,\n      handleNodeClick = props.handleNodeClick,\n      rest = _objectWithoutProperties(props, [\"style\", \"data\", \"handleNodeClick\"]);\n\n  var bindEvents = function bindEvents() {\n    if (graphRef.current) {\n      graphRef.current.on('node:click', function (e) {\n        var item = e.item;\n        handleNodeClick && handleNodeClick(item);\n      });\n    }\n  };\n\n  useEffect(function () {\n    var calculatedWidth = ref.current.clientWidth || defaultContainerWidth;\n    var calculatedHeight = ref.current.clientHeight || defaultContainerHeight;\n\n    if (!graphRef.current) {\n      graphRef.current = new G6.Graph({\n        container: ref.current,\n        width: calculatedWidth,\n        height: calculatedHeight,\n        layout: {\n          type: 'circular'\n        },\n        modes: {\n          \"default\": ['drag-canvas', 'zoom-canvas', 'activate-relations', {\n            type: 'tooltip',\n            formatText: function formatText(model) {\n              return \"Full Name: \".concat(model.name, \"\\nACDC Cluster: \").concat(model.acdcCluster || '');\n            }\n          }, {\n            type: 'collapse-expand-group',\n            trigger: 'click'\n          }]\n        },\n        defaultNode: {\n          size: 20\n        },\n        defaultEdge: {\n          shape: 'line-arrow',\n          size: 2,\n          style: {\n            stroke: '#e2e2e2'\n          }\n        },\n        nodeStateStyles: {\n          active: {\n            opacity: 1\n          },\n          inactive: {\n            opacity: 0.2\n          }\n        },\n        edgeStateStyles: {\n          active: {\n            stroke: '#000'\n          }\n        }\n      });\n      bindEvents();\n    } // Sorts nodes to make nodes grouped together according to groupId\n\n\n    data.nodes.sort(function (lhs, rhs) {\n      if (lhs.groupId === rhs.groupId) {\n        return 0;\n      } else if (lhs.groupId < rhs.groupId) {\n        return 1;\n      } else {\n        return -1;\n      }\n    });\n    graphRef.current.data(data);\n    graphRef.current.render();\n    graphRef.current.paint();\n  }, [data]);\n  return __jsx(\"div\", _extends({\n    ref: ref,\n    style: style\n  }, rest));\n}","map":null,"metadata":{},"sourceType":"module"}