{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport \"antd/lib/collapse/style/css\";\nimport _Collapse from \"antd/lib/collapse\";\nimport \"antd/lib/list/style/css\";\nimport _List from \"antd/lib/list\";\nimport \"antd/lib/typography/style/css\";\nimport _Typography from \"antd/lib/typography\";\nimport \"antd/lib/layout/style/css\";\nimport _Layout from \"antd/lib/layout\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport path from 'path';\nvar Header = _Layout.Header,\n    Content = _Layout.Content,\n    Sider = _Layout.Sider;\nvar Title = _Typography.Title,\n    Text = _Typography.Text;\nvar Item = _List.Item;\nvar Panel = _Collapse.Panel;\nimport dynamic from 'next/dynamic';\nvar ClusterGraph = dynamic(function () {\n  return import('../components/ClusterGraph');\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('../components/ClusterGraph')];\n    },\n    modules: ['../components/ClusterGraph']\n  }\n});\nvar CLUSTER_ID = 'cluster';\n\nfunction Visualization(props) {\n  var data = props.data,\n      error = props.error;\n  var nodes = data.nodes;\n  var listData = nodes.map(function (node) {\n    return {\n      label: node.label,\n      id: node.id,\n      groupId: node.groupId,\n      className: node.className\n    };\n  });\n  var clusterListData = listData.filter(function (item) {\n    return item.groupId === CLUSTER_ID;\n  });\n  var neighborListData = listData.filter(function (item) {\n    return item.groupId !== CLUSTER_ID;\n  });\n  var relatedACDCClusters = data.relatedACDCClusters;\n\n  var acdcClusterListData = _Object$keys(relatedACDCClusters).map(function (key) {\n    return relatedACDCClusters[key];\n  });\n\n  var usedClasses = {};\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = _getIterator(clusterListData), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var node = _step.value;\n      usedClasses[node.className] = true;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return __jsx(_Layout, null, __jsx(Header, {\n    style: {\n      padding: '0.5rem',\n      height: 'auto',\n      margin: 0\n    }\n  }, __jsx(Title, {\n    style: {\n      textAlign: 'center',\n      color: '#fff'\n    }\n  }, \"Visualization for \", data && data['groups'][0].title)), __jsx(Content, {\n    style: {\n      padding: '1rem'\n    }\n  }, __jsx(_Layout, {\n    style: {\n      background: '#fff'\n    }\n  }, __jsx(Sider, {\n    width: 300,\n    style: {\n      background: '#fff',\n      padding: '0.25rem 0.5rem'\n    }\n  }, __jsx(_Collapse, {\n    bordered: false,\n    defaultActiveKey: \"1\"\n  }, __jsx(Panel, {\n    header: \"Elements\",\n    key: \"1\"\n  }, __jsx(\"div\", {\n    style: {\n      maxHeight: 400,\n      overflow: 'auto'\n    }\n  }), clusterListData.map(function (item) {\n    return __jsx(Item, {\n      key: item.id\n    }, __jsx(Text, null, item.label));\n  })), __jsx(Panel, {\n    header: \"ACDC Clusters\",\n    key: \"2\"\n  }, __jsx(\"div\", {\n    style: {\n      maxHeight: 400,\n      overflow: 'auto'\n    }\n  }, __jsx(_Collapse, {\n    bordered: false\n  }, acdcClusterListData.map(function (item) {\n    return __jsx(Panel, {\n      key: item.id,\n      header: item.cluster\n    }, __jsx(\"div\", null, item.elements.map(function (element) {\n      return __jsx(Item, {\n        key: element\n      }, __jsx(Text, {\n        mark: !!usedClasses[element],\n        style: {\n          maxWidth: '100%'\n        }\n      }, element));\n    })));\n  })))), __jsx(Panel, {\n    header: \"Neighbors\",\n    key: \"3\"\n  }, __jsx(\"div\", {\n    style: {\n      maxHeight: 400,\n      overflow: 'auto'\n    }\n  }, neighborListData.map(function (item) {\n    return __jsx(Item, {\n      key: item.id\n    }, __jsx(Text, null, item.label));\n  }))))), __jsx(Content, {\n    style: {\n      padding: '1rem',\n      minHeight: 280\n    }\n  }, error && __jsx(Title, {\n    style: {\n      textAlign: 'center'\n    },\n    type: \"danger\"\n  }, error), !error && __jsx(ClusterGraph, {\n    data: data,\n    style: {\n      border: '1px solid black'\n    }\n  })))));\n}\n\nVisualization.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    var id, error, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            id = context.query.id;\n            error = '';\n            data = null;\n\n            if (id) {\n              _context.next = 7;\n              break;\n            }\n\n            error = 'Please provide an id for visualization';\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.next = 9;\n            return import(\"../parser/cluster-graph/\".concat(id, \".json\"));\n\n          case 9:\n            data = _context.sent;\n\n          case 10:\n            return _context.abrupt(\"return\", {\n              data: data ? data['default'] : null,\n              error: error\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Visualization;","map":null,"metadata":{},"sourceType":"module"}