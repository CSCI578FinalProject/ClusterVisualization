{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport \"antd/lib/collapse/style/css\";\nimport _Collapse from \"antd/lib/collapse\";\nimport \"antd/lib/list/style/css\";\nimport _List from \"antd/lib/list\";\nimport \"antd/lib/typography/style/css\";\nimport _Typography from \"antd/lib/typography\";\nimport \"antd/lib/layout/style/css\";\nimport _Layout from \"antd/lib/layout\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport path from 'path';\nconst {\n  Header,\n  Content,\n  Sider\n} = _Layout;\nconst {\n  Title,\n  Text\n} = _Typography;\nconst {\n  Item\n} = _List;\nconst {\n  Panel\n} = _Collapse;\nimport dynamic from 'next/dynamic';\nconst ClusterGraph = dynamic(() => import('../components/ClusterGraph'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../components/ClusterGraph')],\n    modules: ['../components/ClusterGraph']\n  }\n});\nconst CLUSTER_ID = 'cluster';\n\nfunction Visualization(props) {\n  const {\n    data,\n    error\n  } = props;\n  const nodes = data.nodes;\n  const listData = nodes.map(node => ({\n    label: node.label,\n    id: node.id,\n    groupId: node.groupId,\n    className: node.className\n  }));\n  const clusterListData = listData.filter(item => item.groupId === CLUSTER_ID);\n  const neighborListData = listData.filter(item => item.groupId !== CLUSTER_ID);\n  const relatedACDCClusters = data.relatedACDCClusters;\n\n  const acdcClusterListData = _Object$keys(relatedACDCClusters).map(key => relatedACDCClusters[key]);\n\n  const usedClasses = {};\n\n  for (let node of clusterListData) {\n    usedClasses[node.className] = true;\n  }\n\n  return __jsx(_Layout, null, __jsx(Header, {\n    style: {\n      padding: '0.5rem',\n      height: 'auto',\n      margin: 0\n    }\n  }, __jsx(Title, {\n    style: {\n      textAlign: 'center',\n      color: '#fff'\n    }\n  }, \"Visualization for \", data && data['groups'][0].title)), __jsx(Content, {\n    style: {\n      padding: '1rem'\n    }\n  }, __jsx(_Layout, {\n    style: {\n      background: '#fff'\n    }\n  }, __jsx(Sider, {\n    width: 300,\n    style: {\n      background: '#fff',\n      padding: '0.25rem 0.5rem'\n    }\n  }, __jsx(_Collapse, {\n    bordered: false,\n    defaultActiveKey: \"1\"\n  }, __jsx(Panel, {\n    header: \"Elements\",\n    key: \"1\"\n  }, __jsx(\"div\", {\n    style: {\n      maxHeight: 400,\n      overflow: 'auto'\n    }\n  }), clusterListData.map(item => {\n    return __jsx(Item, {\n      key: item.id\n    }, __jsx(Text, null, item.label));\n  })), __jsx(Panel, {\n    header: \"ACDC Clusters\",\n    key: \"2\"\n  }, __jsx(\"div\", {\n    style: {\n      maxHeight: 400,\n      overflow: 'auto'\n    }\n  }, __jsx(_Collapse, {\n    bordered: false\n  }, acdcClusterListData.map(item => {\n    return __jsx(Panel, {\n      key: item.id,\n      header: item.cluster\n    }, __jsx(\"div\", null, item.elements.map(element => {\n      return __jsx(Item, {\n        key: element\n      }, __jsx(Text, {\n        mark: !!usedClasses[element],\n        style: {\n          maxWidth: '100%'\n        }\n      }, element));\n    })));\n  })))), __jsx(Panel, {\n    header: \"Neighbors\",\n    key: \"3\"\n  }, __jsx(\"div\", {\n    style: {\n      maxHeight: 400,\n      overflow: 'auto'\n    }\n  }, neighborListData.map(item => {\n    return __jsx(Item, {\n      key: item.id\n    }, __jsx(Text, null, item.label));\n  }))))), __jsx(Content, {\n    style: {\n      padding: '1rem',\n      minHeight: 280\n    }\n  }, error && __jsx(Title, {\n    style: {\n      textAlign: 'center'\n    },\n    type: \"danger\"\n  }, error), !error && __jsx(ClusterGraph, {\n    data: data,\n    style: {\n      border: '1px solid black'\n    }\n  })))));\n}\n\nVisualization.getInitialProps = async function (context) {\n  const {\n    id\n  } = context.query;\n  let error = '';\n  let data = null;\n\n  if (!id) {\n    error = 'Please provide an id for visualization';\n  } else {\n    data = await import(`../parser/cluster-graph/${id}.json`);\n  }\n\n  return {\n    data: data ? data['default'] : null,\n    error\n  };\n};\n\nexport default Visualization;","map":null,"metadata":{},"sourceType":"module"}