{"version":3,"file":"static/webpack/1.21d783653bc984dc7023.hot-update.js","sources":["webpack:///./components/ClusterGraph.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport G6 from '@antv/g6';\nimport insertCss from 'insert-css';\n\nimport { defaultContainerWidth, defaultContainerHeight } from '../constants';\n\n// Following code is based on examples from https://g6.antv.vision/en/examples/\ninsertCss(`\n  .g6-tooltip {\n    border: 1px solid #e2e2e2;\n    border-radius: 4px;\n    font-size: 12px;\n    color: #000;\n    background-color: rgba(255, 255, 255, 0.9);\n    padding: 10px 8px; \n    box-shadow: rgb(174, 174, 174) 0px 0px 10px;\n    white-space:pre-wrap;\n  }\n`);\n\nexport default function Graph(props) {\n  const ref = useRef();\n  const graphRef = useRef();\n\n  const { style, data, handleNodeClick, ...rest } = props;\n\n  const bindEvents = () => {\n    if (graphRef.current) {\n      graphRef.current.on('node:click', e => {\n        const { item } = e;\n        handleNodeClick && handleNodeClick(item);\n      });\n    }\n  };\n\n  useEffect(() => {\n    const calculatedWidth = ref.current.clientWidth || defaultContainerWidth;\n    const calculatedHeight = ref.current.clientHeight || defaultContainerHeight;\n\n    if (!graphRef.current) {\n      graphRef.current = new G6.Graph({\n        container: ref.current,\n        width: calculatedWidth,\n        height: calculatedHeight,\n        layout: {\n          type: 'circular'\n        },\n        modes: {\n          default: [\n            'drag-canvas',\n            'zoom-canvas',\n            'activate-relations',\n            {\n              type: 'tooltip',\n              formatText: model => {\n                return `Full Name: ${\n                  model.name\n                }\\nACDC Cluster: ${model.acdcCluster || ''}`;\n              }\n            },\n            {\n              type: 'collapse-expand-group',\n              trigger: 'click'\n            }\n          ]\n        },\n        defaultNode: {\n          size: 20\n        },\n        defaultEdge: {\n          size: 2,\n          style: {\n            stroke: '#e2e2e2'\n          },\n          endArrow: true\n        },\n        nodeStateStyles: {\n          active: {\n            opacity: 1\n          },\n          inactive: {\n            opacity: 0.2\n          }\n        },\n        edgeStateStyles: {\n          active: {\n            stroke: '#000'\n          }\n        }\n      });\n      bindEvents();\n    }\n    data.nodes.sort((lhs, rhs) => {\n      if (lhs.groupId === rhs.groupId) {\n        return 0;\n      } else if (lhs.groupId < rhs.groupId) {\n        return 1;\n      } else {\n        return -1;\n      }\n    });\n    graphRef.current.data(data);\n\n    graphRef.current.render();\n\n    const edges = graphRef.current.getEdges();\n    graphRef.current.paint();\n  }, [data]);\n\n  return <div ref={ref} style={style} {...rest}></div>;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAaA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAKA;AACA;AACA;AAGA;AANA;AASA;AACA;AAFA;AAbA;AAmBA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AALA;AAOA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAQA;AACA;AACA;AADA;AADA;AA5CA;AAkDA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;A","sourceRoot":""}